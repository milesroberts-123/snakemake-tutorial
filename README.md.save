# snakemake-tutorial

## Contents

## Introduction

We want code that is reproducible. But what does that really mean?

**Reproducibility** describes the ability to perfectly replicate a procedure, given proper instruction and adequate background in the relevant subjects. In science, we're often interested in replicating an analysis.

But what exactly makes work reproducible? Some qualities of reproduciblity include:

* readability: code is easily understood by a person who's not you

* portability: code still works even when transferred between computers with different environments

* modularity: functional chunks of code can be exchanged between scripts

* scalability: code still works if the size of the input data changes

* transparency: the exact values of every parameter are clearly specified

In addition, I also like to add:

* parallelizability: code can be split over an arbitrary number of cores or nodes to quickly process large datasets

* accessibility: code can be run at a minimal cost to the user in terms of time and money

Can you think of other qualities that help make code reproducible?

## What is snakemake?

[Snakemake](https://snakemake.github.io/) **is a python-based software for building and running workflows.**

What is a workflow?

A workflow is a  

## 

## Helpful links

### Tips and best practices 

[Best practices](https://snakemake.readthedocs.io/en/stable/snakefiles/best_practices.html)

[Distribution and reproducibility](https://snakemake.readthedocs.io/en/stable/snakefiles/deployment.html)

### Official tutorials

These official tutorials are rather complicated, including the ones labeled as "basic". However, they are quite practical.

["Basic" tutorial](https://snakemake.readthedocs.io/en/stable/tutorial/short.html)
